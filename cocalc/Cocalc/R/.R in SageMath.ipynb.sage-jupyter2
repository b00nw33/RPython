{"backend_state":"ready","kernel":"sage-9.7","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.5"}},"type":"settings"}
{"cell_type":"code","collapsed":true,"exec_count":8,"id":"26f25c","input":"%R?","metadata":{"jupyter":{"outputs_hidden":true}},"output":{"0":{"data":{"text/plain":"\u001b[0;31mDocstring:\u001b[0m\n   %R [-i INPUT] [-o OUTPUT] [-n] [-w WIDTH] [-h HEIGHT] [-p POINTSIZE]\n          [-b BG] [--noisolation] [-u {px,in,cm,mm}] [-r RES]\n          [--type {cairo,cairo-png,Xlib,quartz}] [-c CONVERTER] [-d DISPLAY]\n          [code ...]\n\nExecute code in R, optionally returning results to the Python runtime.\n\nIn line mode, this will evaluate an expression and convert the\nreturned value to a Python object.  The return value is determined by\nrpy2's behaviour of returning the result of evaluating the final\nexpression.\n\nMultiple R expressions can be executed by joining them with\nsemicolons:\n\n   In [9]: %R X=c(1,4,5,7); sd(X); mean(X)\n   Out[9]: array([ 4.25])\n\nIn cell mode, this will run a block of R code. The resulting value is\nprinted if it would be printed when evaluating the same code within a\nstandard R REPL.\n\nNothing is returned to python by default in cell mode:\n\n   In [10]: %%R\n      ....: Y = c(2,4,3,9)\n      ....: summary(lm(Y~X))\n\n   Call:\n   lm(formula = Y ~ X)\n\n   Residuals:\n       1     2     3     4\n    0.88 -0.24 -2.28  1.64\n\n   Coefficients:\n               Estimate Std. Error t value Pr(>|t|)\n   (Intercept)   0.0800     2.3000   0.035    0.975\n   X             1.0400     0.4822   2.157    0.164\n\n   Residual standard error: 2.088 on 2 degrees of freedom\n   Multiple R-squared: 0.6993,Adjusted R-squared: 0.549\n   F-statistic: 4.651 on 1 and 2 DF,  p-value: 0.1638\n\nIn the notebook, plots are published as the output of the cell:\n\n   %R plot(X, Y)\n\nwill create a scatter plot of X bs Y.\n\nIf cell is not None and line has some R code, it is prepended to the R\ncode in cell.\n\nObjects can be passed back and forth between rpy2 and python via the\n-i -o flags in line:\n\n   In [14]: Z = np.array([1,4,5,10])\n\n   In [15]: %R -i Z mean(Z)\n   Out[15]: array([ 5.])\n\n   In [16]: %R -o W W=Z*mean(Z)\n   Out[16]: array([  5.,  20.,  25.,  50.])\n\n   In [17]: W\n   Out[17]: array([  5.,  20.,  25.,  50.])\n\nThe return value is determined by these rules:\n\n* If the cell is not None (i.e., has contents), the magic returns\n  None.\n\n* If the final line results in a NULL value when evaluated by rpy2,\n  then None is returned.\n\n* No attempt is made to convert the final value to a structured array.\n  Use %Rget to push a structured array.\n\n* If the -n flag is present, there is no return value.\n\n* A trailing ';' will also result in no return value as the last value\n  in the line is an empty string.\n\noptions:\n   -i INPUT, --input INPUT\n\n   Names of input variable from shell.user_ns to be assigned to R\n   variables of the same names after using the Converter\n   self.converter. Multiple names can be passed separated only by\n   commas with no whitespace.\n\n   -o OUTPUT, --output OUTPUT\n\n   Names of variables to be pushed from rpy2 to shell.user_ns after\n   executing cell body (rpy2's internal facilities will apply ri2ro as\n   appropriate). Multiple names can be passed separated only by commas\n   with no whitespace.\n\n   -n, --noreturn\n\n   Force the magic to not return anything.\n\nPlot:\n   Arguments to plotting device\n\n   -w WIDTH, --width WIDTH\n\n   Width of plotting device in R.\n\n   -h HEIGHT, --height HEIGHT\n\n   Height of plotting device in R.\n\n   -p POINTSIZE, --pointsize POINTSIZE\n\n   Pointsize of plotting device in R.\n\n   -b BG, --bg BG\n\n   Background of plotting device in R.\n\nSVG:\n   SVG specific arguments\n\n   --noisolation\n\n   Disable SVG isolation in the Notebook. By default, SVGs are\n   isolated to avoid namespace collisions between figures. Disabling\n   SVG isolation allows to reference previous figures or share CSS\n   rules across a set of SVGs.\n\nPNG:\n   PNG specific arguments\n\n   -u <{px,in,cm,mm}>, --units <{px,in,cm,mm}>\n\n   Units of png plotting device sent as an argument to *png* in R. One\n   of [\"px\", \"in\", \"cm\", \"mm\"].\n\n   -r RES, --res RES\n\n   Resolution of png plotting device sent as an argument to *png* in\n   R. Defaults to 72 if *units* is one of [\"in\", \"cm\", \"mm\"].\n\n   --type <{cairo,cairo-png,Xlib,quartz}>\n\n   Type device used to generate the figure.\n\n   -c CONVERTER, --converter CONVERTER\n\n   Name of local converter to use. A converter contains the rules to\n   convert objects back and forth between Python and R. If not\n   specified/None, the defaut converter for the magic's module is used\n   (that is rpy2's default converter + numpy converter + pandas\n   converter if all three are available).\n\n   -d DISPLAY, --display DISPLAY\n\n   Name of function to use to display the output of an R cell (the\n   last object or function call that does not have a left-hand side\n   assignment). That function will have the signature (robject, args)\n   where robject is the R objects that is an output of the cell, and\n   args a namespace with all parameters passed to the cell.\n\n   code\n\u001b[0;31mFile:\u001b[0m      /ext/sage/9.7/local/var/lib/sage/venv-python3.10.5/lib/python3.10/site-packages/rpy2/ipython/rmagic.py\n"},"output_type":"display_data"}},"pos":7,"tags":{},"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"58ffdd","input":"%%r\n\na <- c(3:7,12:9)\nb <- cumsum(a)\nb","metadata":{"jupyter":{"outputs_hidden":false}},"output":{"0":{"name":"stdout","output_type":"stream","text":"[1]  3  7 12 18 25 37 48 58 67\n"}},"pos":0,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"0eaf4c","input":"x = r([10.4,5.6,3.1,6.4,21.7])\n3*~x","metadata":{"jupyter":{"outputs_hidden":false}},"output":{"0":{"data":{"text/plain":"[1] 0.2884615 0.5357143 0.9677419 0.4687500 0.1382488"},"exec_count":2,"output_type":"execute_result"}},"pos":1,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"60438a","input":"m = x.mean()\nm","metadata":{"jupyter":{"outputs_hidden":false}},"output":{"0":{"data":{"text/plain":"[1] 9.44"},"exec_count":3,"output_type":"execute_result"}},"pos":2,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"b5a7a7","input":"var('c')\nsolve(2*c+3,c,solution_dict=True)","metadata":{"jupyter":{"outputs_hidden":false}},"output":{"0":{"data":{"text/plain":"[{c: -3/2}]"},"exec_count":4,"output_type":"execute_result"}},"pos":3,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"8d8569","input":"x","metadata":{"jupyter":{"outputs_hidden":false}},"output":{"0":{"data":{"text/plain":"[1] 10.4  5.6  3.1  6.4 21.7"},"exec_count":5,"output_type":"execute_result"}},"pos":4,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"998082","input":"a = [5,2,5,3,6]\na[-2:]","metadata":{"jupyter":{"outputs_hidden":false}},"output":{"0":{"data":{"text/plain":"[3, 6]"},"exec_count":6,"output_type":"execute_result"}},"pos":5,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"d46572","input":"%load_ext rpy2.ipython","metadata":{"jupyter":{"outputs_hidden":false}},"pos":6,"type":"cell"}
{"cell_type":"markdown","id":"940fb8","input":"# Project aborted as integration between R and SageMath does not appear seamless enough","pos":8,"type":"cell"}
{"id":0,"time":1675945912911,"type":"user"}
{"last_load":1675945879478,"type":"file"}